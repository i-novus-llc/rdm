<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="201905301520-RDM-486_1.0" author="arahmatullin" dbms="postgresql">
        <comment>Изменение вычисления hash только по value для jsonb</comment>
        <sql splitStatements="false">
            <![CDATA[
do
$$

declare
    r record;
    n record;

begin
    for r in
        select l_t.table_catalog, l_t.table_schema, l_t.table_name
          from information_schema.tables as l_t
         where l_t.table_catalog = 'rdm'
           and l_t.table_schema = 'data'
           and l_t.table_type = 'BASE TABLE'
           and exists(
               select 1
                 from information_schema.columns as l_c
                where l_c.table_catalog = l_t.table_catalog
                  and l_c.table_schema = l_t.table_schema
                  and l_c.table_name = l_t.table_name
               )
    loop
        select
            string_agg('"' || column_name || '"', ',') clear_names,

            string_agg(
              'NEW."' || column_name || '"'
                || (case when data_type = 'jsonb' then '->>''value''' else '' end),
              ', ') as hash_names,

            string_agg(
              'coalesce( to_tsvector(''ru'', NEW."' || column_name || '"'
                || (case when data_type = 'jsonb' then '->>''value''' else '' end)
                || '::text),'''')',
              ' || '' '' || ') as fts_names
        into n
        from information_schema.columns as l_c
        where l_c.table_catalog = r.table_catalog
          and l_c.table_schema = r.table_schema
          and l_c.table_name = r.table_name;

        execute 'DROP TRIGGER IF EXISTS hash_tg ON data.' || quote_ident(r.table_name) || ';' || chr(10) ||
                chr(10) ||
                'CREATE OR REPLACE FUNCTION data.' ||
                    quote_ident(r.table_name || '_hash_tf') || '()' || chr(10) ||
                '  RETURNS trigger AS' || chr(10) ||
                '$BODY$' || chr(10) ||
                '  BEGIN' || chr(10) ||
                '    NEW."SYS_HASH" = md5(ROW(' ||
                    n.hash_names || ')||'''');' || chr(10) ||
                '    RETURN NEW;' || chr(10) ||
                '  END;' || chr(10) ||
                '  $BODY$' || chr(10) ||
                '  LANGUAGE plpgsql;' || chr(10) ||
                chr(10) ||
                '  CREATE TRIGGER hash_tg' || chr(10) ||
                '  BEFORE INSERT OR UPDATE OF ' || n.clear_names || chr(10) ||
                '  ON data.' || quote_ident(r.table_name) || chr(10) ||
                '  FOR EACH ROW' || chr(10) ||
                '  EXECUTE PROCEDURE data.' ||
                    quote_ident(r.table_name || '_hash_tf') || '();'
              ;
      execute 'DROP TRIGGER IF EXISTS fts_vector_tg ON data.' || quote_ident(r.table_name) || ';' || chr(10) ||
                chr(10) ||
                'CREATE OR REPLACE FUNCTION data.' ||
                    quote_ident(r.table_name || '_fts_vector_tf') || '()' || chr(10) ||
                '  RETURNS trigger AS' || chr(10) ||
                '$BODY$' || chr(10) ||
                '  BEGIN' || chr(10) ||
                '    NEW."FTS" = ' || n.fts_names || ';' || chr(10) ||
                '    RETURN NEW;' || chr(10) ||
                '  END;' || chr(10) ||
                '  $BODY$' || chr(10) ||
                '  LANGUAGE plpgsql;' || chr(10) ||
                chr(10) ||
                '  CREATE TRIGGER fts_vector_tg' || chr(10) ||
                '  BEFORE INSERT OR UPDATE OF ' || n.clear_names || chr(10) ||
                '  ON data.' || quote_ident(r.table_name) || chr(10) ||
                '  FOR EACH ROW' || chr(10) ||
                '  EXECUTE PROCEDURE data.' ||
                    quote_ident(r.table_name || '_fts_vector_tf') || '();'
              ;
    end loop;
end;

$$ language plpgsql;
            ]]>
        </sql>
    </changeSet>

</databaseChangeLog>